# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

# - other dependence -
# azure-mgmt-monitor==6.0.2
# azure-mgmt-alertsmanagement==2.0.0b2
# - end -

from azure.identity import DefaultAzureCredential
from azure.core.rest import HttpRequest
from azure.mgmt.containerservice import ContainerServiceClient
from azure.mgmt.monitor import MonitorManagementClient
from azure.mgmt.alertsmanagement import AlertsManagementClient
from dotenv import load_dotenv
import os, json


def main():
    load_dotenv()
    AZURE_SUBSCRIPTION_ID = os.environ.get("AZURE_SUBSCRIPTION_ID", None)
    RESOURCE_GROUP_NAME = os.environ.get("RESOURCE_GROUP_NAME", None)
    AZURE_LOCATION = os.environ.get("AZURE_LOCATION", None)
    MANAGED_CLUSTERS_NAME = os.environ.get("MANAGED_CLUSTERS_NAME", None)
    MANAGED_CLUSTERS_ID = os.environ.get("MANAGED_CLUSTERS_ID", None)
    MONITOR_WORKSPACE_NAME = os.environ.get("MONITOR_WORKSPACE_NAME", None)

    # Create client
    containerservice_client = ContainerServiceClient(
        subscription_id=AZURE_SUBSCRIPTION_ID,
        credential=DefaultAzureCredential(),
    )
    monitor_client = MonitorManagementClient(
        subscription_id=AZURE_SUBSCRIPTION_ID,
        credential=DefaultAzureCredential(),
    )
    alert_management_client = AlertsManagementClient(
        subscription_id=AZURE_SUBSCRIPTION_ID,
        credential=DefaultAzureCredential(),
    )

    # Create azure monitor workspace
    azure_monitor_workspace_id = monitor_client.azure_monitor_workspaces.create(
        resource_group_name=RESOURCE_GROUP_NAME,
        azure_monitor_workspace_name=MONITOR_WORKSPACE_NAME,
        azure_monitor_workspace_properties={
            "location": AZURE_LOCATION,
        },
    ).id

    # Create data collection endpoint
    data_collection_endpoint_id = monitor_client.data_collection_endpoints.create(
        resource_group_name=RESOURCE_GROUP_NAME,
        data_collection_endpoint_name=f"MSProm-{AZURE_LOCATION}-{MANAGED_CLUSTERS_NAME}",
        body={
            "location": AZURE_LOCATION,
            "kind": "Linux",
            "properties": {"description": "Data Collection Endpoint for AKS"},
        },
    ).id

    # Create data collection rule
    data_collection_rule_id = monitor_client.data_collection_rules.create(
        resource_group_name=RESOURCE_GROUP_NAME,
        data_collection_rule_name=f"MSProm-{AZURE_LOCATION}-{MANAGED_CLUSTERS_NAME}",
        body={
            "location": AZURE_LOCATION,
            "kind": "Linux",
            "properties": {
                "dataCollectionEndpointId": data_collection_endpoint_id,
                "dataSources": {
                    "prometheusForwarder": [
                        {
                            "name": "PrometheusDataSource",
                            "streams": ["Microsoft-PrometheusMetrics"],
                            "labelIncludeFilter": {},
                        }
                    ]
                },
                "dataFlows": [{"destinations": ["MonitoringAccount1"], "streams": ["Microsoft-PrometheusMetrics"]}],
                "description": "DCR description",
                "destinations": {
                    "monitoringAccounts": [
                        {"accountResourceId": azure_monitor_workspace_id, "name": "MonitoringAccount1"}
                    ]
                },
            },
        },
    ).id

    # Create data collection rule association
    monitor_client.data_collection_rule_associations.create(
        resource_uri=MANAGED_CLUSTERS_ID,
        association_name="ContainerInsightsMetricsExtension",
        body={
            "location": AZURE_LOCATION,
            "properties": {
                "dataCollectionRuleId": data_collection_rule_id,
                "description": "Promtheus data collection association between DCR, DCE and target AKS resource",
            },
        },
    )

    # Get rule templates
    def get_recording_rules_template(i: int) -> list:
        response = alert_management_client._send_request(
            HttpRequest(
                "GET",
                f"{azure_monitor_workspace_id}/providers/microsoft.alertsmanagement/alertRuleRecommendations?api-version=2023-01-01-preview",
            )
        )
        data = json.loads(response.text())
        filtered_templates = [
            template
            for template in data.get("value", [])
            if template.get("properties", {}).get("alertRuleType", "").lower()
            == "microsoft.alertsmanagement/prometheusrulegroups"
            and isinstance(template.get("properties", {}).get("rulesArmTemplate", {}).get("resources"), list)
            and all(
                isinstance(rule, dict) and "record" in rule and "expression" in rule
                for resource in template["properties"]["rulesArmTemplate"]["resources"]
                if resource.get("type", "").lower() == "microsoft.alertsmanagement/prometheusrulegroups"
                for rule in resource.get("properties", {}).get("rules", [])
            )
        ]
        return filtered_templates[i]["properties"]["rulesArmTemplate"]["resources"][0]["properties"]["rules"]

    # Create prometheus rule groups
    alert_management_client.prometheus_rule_groups.create_or_update(
        resource_group_name=RESOURCE_GROUP_NAME,
        rule_group_name=f"NodeRecordingRulesRuleGroup-{MANAGED_CLUSTERS_NAME}",
        parameters={
            "location": AZURE_LOCATION,
            "type": "Microsoft.AlertsManagement/prometheusRuleGroups",
            "properties": {
                "scopes": [azure_monitor_workspace_id, MANAGED_CLUSTERS_ID],
                "enabled": True,
                "clusterName": MANAGED_CLUSTERS_NAME,
                "interval": "PT1M",
                "rules": get_recording_rules_template(0),
            },
        },
    )

    alert_management_client.prometheus_rule_groups.create_or_update(
        resource_group_name=RESOURCE_GROUP_NAME,
        rule_group_name=f"KubernetesRecordingRulesRuleGroup-{MANAGED_CLUSTERS_NAME}",
        parameters={
            "location": AZURE_LOCATION,
            "type": "Microsoft.AlertsManagement/prometheusRuleGroups",
            "properties": {
                "scopes": [azure_monitor_workspace_id, MANAGED_CLUSTERS_ID],
                "enabled": True,
                "clusterName": MANAGED_CLUSTERS_NAME,
                "interval": "PT1M",
                "rules": get_recording_rules_template(1),
            },
        },
    )

    # Update Managed Cluster
    managed_cluster = containerservice_client.managed_clusters.begin_create_or_update(
        resource_group_name=RESOURCE_GROUP_NAME,
        resource_name=MANAGED_CLUSTERS_NAME,
        parameters={"location": AZURE_LOCATION, "azureMonitorProfile": {"metrics": {"enabled": True}}},
    ).result()


if __name__ == "__main__":
    main()
