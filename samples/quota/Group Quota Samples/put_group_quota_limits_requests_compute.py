# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.identity import DefaultAzureCredential

from azure.mgmt.quota import QuotaMgmtClient

import re
import time

"""
# PREREQUISITES
    pip install azure-identity
    pip install azure-mgmt-quota
# USAGE
    python put_group_quota_limits_requests_compute.py

    Before run the sample, please set the values of the client ID, tenant ID and client secret
    of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID,
    AZURE_CLIENT_SECRET. For more info about how to get the value, please see:
    https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal
"""

def cut_id(string):
    # regex finds the portion after the last slash and before the question
    match = re.search(r'/([^/?]+)\?', string)
    return match.group(1)

def cut_url(string):
    # regex removes everything after and including the first '&' symbol
    return re.sub(r'&.*', '', string)

def request(client, id):
    return client.group_quota_limits_request.get(
        management_group_id="E7EC67B3-7657-4966-BFFC-41EFD36BAA09",
        group_quota_name="groupquota1",
        request_id_parameter=id,
    )

def main():
    client = QuotaMgmtClient(
        credential=DefaultAzureCredential(),
        subscription_id="00000000-0000-0000-0000-000000000000",
    )

    data = {
      "properties": {
        "requestedResource": {
          "properties": {
            "limit": "20",
            "region": "westus"
          }
        }
      }
    }

    response = client.group_quota_limits_request.begin_create_or_update(
        management_group_id="E7EC67B3-7657-4966-BFFC-41EFD36BAA09",
        group_quota_name="groupquota1",
        resource_provider_name="Microsoft.Quota",
        resource_name="standardav2family",
        group_quota_request = data,
    )
    
    filtered_properties = response._polling_method._initial_response.http_response.headers._store['location']
    id = cut_id(filtered_properties[1])
    url = cut_url(filtered_properties[1])
    
    response = request(client,id)

    timeoutLimit = 240
    timeoutSleep = 15
    while timeoutLimit > 0 and response.properties.provisioning_state in ('Accepted', 'InProgress'):
      print('Polling status: ' + response.properties.provisioning_state)
      time.sleep(timeoutSleep)
      timeoutLimit -= timeoutSleep
      response = request(client,id)

    if timeoutLimit == 0:
        print('The operation is still running, the Polling time limit was reached')

    print('Polling completed, final status: ' + response.properties.provisioning_state)

    if response.properties.provisioning_state == 'Escalated':
        print("Please contact your Capacity Manager")
    
    if response.properties.provisioning_state != 'Succeeded':
        print('Status url: ' + url)


# x-ms-original-file: specification/quota/resource-manager/Microsoft.Quota/preview/2023-06-01-preview/examples/GroupQuotaLimitsRequests/PutGroupQuotaLimitsRequests-Compute.json
if __name__ == "__main__":
    main()
