# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import os
from azure.identity import DefaultAzureCredential
from azure.mgmt.monitor import MonitorManagementClient
from dotenv import load_dotenv

"""
# PREREQUISITES
    pip install azure-identity
    pip install azure-mgmt-monitor
# USAGE
    python create_or_update_scheduled_query_rule.py

    this sample has same function with the following azure cli command:
    az monitor scheduled-query create \
    --action /subscriptions/MySubScriptionId/resourceGroups/MyResourceGroupName/providers/microsoft.insights/actionGroups/MyActionGroupName \
    --name "MyScheduledQueryName" \
    --resource-group MyResourceGroupName \
    --scopes "/subscriptions/MySubScriptionId/resourceGroups/MyResourceGroupName/providers/Microsoft.Compute/virtualMachines/MyVmName" \
    --description "Health check for the service stc-internal-cmg" \
    --condition "count 'Placeholder_1' > 1 resource id _ResourceId at least 1 violations out of 5 aggregated points" \
    --condition-query "Placeholder_1=$query" \
    --evaluation-frequency "15m" \
    --severity 1 \
    --window-size 15m
"""


def main():
    load_dotenv()
    sub_id = os.getenv("AZURE_SUBSCRIPTION_ID")
    resource_group = "MyResourceGroupName"
    action_group = f"/subscriptions/{sub_id}/resourceGroups/{resource_group}/providers/microsoft.insights/actionGroups/MyActionGroupName"
    kql_query = """
               traces
    | where timestamp > ago(5m)
    | where cloud_RoleInstance == "xx.xxx.com"
    | where  message == "xx.xxx.com is alive!"
                """
    client = MonitorManagementClient(
        credential=DefaultAzureCredential(),
        subscription_id=sub_id,
        api_version="2022-08-01-preview",
    )

    response = client.scheduled_query_rules.create_or_update(
        resource_group_name=resource_group,
        rule_name="MyScheduledQueryName",
        parameters={
            "location": "northcentralus",
            "properties": {
                "actions": {
                    "actionGroups": [action_group],
                    "customProperties": {},
                },
                "checkWorkspaceAlertsStorageConfigured": False,
                "criteria": {
                    "allOf": [
                        {
                            "dimensions": [],
                            "failingPeriods": {"minFailingPeriodsToAlert": 1, "numberOfEvaluationPeriods": 1},
                            "operator": "LessThan",
                            "query": kql_query,
                            "resourceIdColumn": "_ResourceId",
                            "threshold": 1.0,
                            "timeAggregation": "Count",
                        }
                    ]
                },
                "description": "Health check for the service xxx is down in host xx.xxx.com.Refer wiki link",
                "enabled": True,
                "evaluationFrequency": "PT10M",
                "id": f"/subscriptions/{sub_id}/resourceGroups/{resource_group}/providers/microsoft.insights/scheduledqueryrules/MyScheduledQueryName",
                "location": "northcentralus",
                "name": "MyScheduledQueryName",
                "resourceGroup": resource_group,
                "scopes": [
                    f"/subscriptions/{sub_id}/resourceGroups/{resource_group}/providers/microsoft.insights/components/mycomponentname"
                ],
                "severity": 1,
                "skipQueryValidation": False,
                "type": "Microsoft.Insights/scheduledQueryRules",
                "windowSize": "PT10M",
            },
        },
    )
    print(response.as_dict())


if __name__ == "__main__":
    main()
